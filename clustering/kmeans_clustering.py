#%% Importing the librariesimport numpy as npimport matplotlib.pyplot as pltimport pandas as pdfrom sklearn.cluster import KMeansfrom sklearn.decomposition import PCA#%% Importing the datasetdataset = pd.read_csv('clustering/pcs.csv', index_col=0)X = dataset.valuesnames = dataset.index#%% Using the elbow method to find the optimal number of clusterswcss = []for i in range(1, 20):    print(i)    kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 14)    kmeans.fit(X)    wcss.append(kmeans.inertia_)plt.plot(range(1, 20), wcss)plt.title('The Elbow Method')plt.xlabel('Number of clusters')plt.ylabel('WCSS')plt.show()#%% Training the K-Means model on the datasetbest_model = []best_wcss = 160000cluster_num = 11for state in range(0, 50):    kmeans = KMeans(n_clusters = cluster_num, init = 'k-means++', random_state = state)    y_kmeans = kmeans.fit_predict(X)    clusters = pd.DataFrame(y_kmeans)    clusters.index = names    if kmeans.inertia_ < best_wcss:        best_model = [kmeans, y_kmeans, clusters]        best_wcss = kmeans.inertia_        print('current best state is ' + str(state) + ' with wcss: '              + str(best_wcss))kmeans = best_model[0]y_kmeans = best_model[1]clusters = best_model[2]for cluster in range(cluster_num):    print(clusters.index[clusters[0] == cluster].tolist())    print()    print()    print()#%% Visualising the clustersplt.scatter(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1], s = 100, c = 'red', label = 'Cluster 1')plt.scatter(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')plt.scatter(X[y_kmeans == 2, 0], X[y_kmeans == 2, 1], s = 100, c = 'green', label = 'Cluster 3')plt.scatter(X[y_kmeans == 3, 0], X[y_kmeans == 3, 1], s = 100, c = 'cyan', label = 'Cluster 4')plt.scatter(X[y_kmeans == 4, 0], X[y_kmeans == 4, 1], s = 100, c = 'magenta', label = 'Cluster 5')plt.scatter(X[y_kmeans == 5, 0], X[y_kmeans == 5, 1], s = 100, c = 'orange', label = 'Cluster 6')plt.scatter(X[y_kmeans == 6, 0], X[y_kmeans == 6, 1], s = 100, c = 'purple', label = 'Cluster 7')plt.scatter(X[y_kmeans == 7, 0], X[y_kmeans == 7, 1], s = 100, c = 'brown', label = 'Cluster 8')plt.scatter(X[y_kmeans == 8, 0], X[y_kmeans == 8, 1], s = 100, c = 'black', label = 'Cluster 9')plt.scatter(X[y_kmeans == 9, 0], X[y_kmeans == 9, 1], s = 100, c = 'tan', label = 'Cluster 10')plt.scatter(X[y_kmeans == 10, 0], X[y_kmeans == 10, 1], s = 100, c = 'maroon', label = 'Cluster 11')plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 300, c = 'yellow', label = 'Centroids')plt.title('Clusters of players')plt.xlabel('PC1')plt.ylabel('PC2')plt.legend()plt.show()#%% get cluster averagesdataset = pd.read_csv('data/combinedPlayerTotals.csv', index_col=0)cluster_means = pd.DataFrame()for i in range(cluster_num):    cluster = clusters.index[clusters[0] == i].tolist()    cluster_means = cluster_means.append(dataset.loc[cluster].mean(axis=0), ignore_index=True)